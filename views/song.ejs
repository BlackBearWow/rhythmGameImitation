<!DOCTYPE html>
<html lang="en" data-bs-theme="light">

<head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        //url
        let songName, fileName;
        let can;        //canvas 객체
        let ctx;        //context객체를 얻어야 drawimage와 filltext를 할 수 있음
        let mainInterval;   //interval변수
        //osu file format분석에 필요한 변수들
        //object와 배열로 만들 것이다.
        let General;
        let Editor;
        let Metadata;
        let Difficulty;
        let Events;
        let TimingPoints;
        let Colours;
        let HitObjects;
        //게임에서 사용하는 변수
        let height=100;
        let bgm;
        //시간
        let startTime;
        let currentTime;

        $(document).ready(() => {
            can = document.getElementById("can");
			ctx = can.getContext("2d");
            getFileData();
            $("#can").keydown(function (e) {
				if (e.key == " ") {
                    if(!mainInterval) {
                        bgm.play();
                        mainInterval = setInterval(oneFrame, 10);
                        startTime = new Date().getTime();
                    }
				}
			});
        })
        function alertAndHistoryBack(msg) {
            alert(msg);
            history.go(-1);
        }
        function getFileData() {
            songName = window.location.pathname.split('/')[2];
            fileName = window.location.pathname.split('/')[3];
            $.ajax({
                url: `/getFileData/${songName}/${fileName}`,
                type: "get",
                success: function (data) {
                    analyseFileData(data);
                    initialize();
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }
        function analyseFileData(data) {
            General = data.match(/(?<=\[General\])([\s\S]*?)(?=\[Editor\]|\[Metadata\]|\[Difficulty\]|\[Events\]|\[TimingPoints\]|\[Colours\]|\[HitObjects\])/);
            analyseGeneral();
            Editor = data.match(/(?<=\[Editor\])([\s\S]*?)(?=\[Metadata\]|\[Difficulty\]|\[Events\]|\[TimingPoints\]|\[Colours\]|\[HitObjects\])/);
            analyseEditor();
            Metadata = data.match(/(?<=\[Metadata\])([\s\S]*?)(?=\[Difficulty\]|\[Events\]|\[TimingPoints\]|\[Colours\]|\[HitObjects\])/);
            analyseMetadata();
            Difficulty = data.match(/(?<=\[Difficulty\])([\s\S]*?)(?=\[Events\]|\[TimingPoints\]|\[Colours\]|\[HitObjects\])/);
            analyseDifficulty();
            Events = data.match(/(?<=\[Events\])([\s\S]*?)(?=\[TimingPoints\]|\[Colours\]|\[HitObjects\])/);
            analyseEvents();
            TimingPoints = data.match(/(?<=\[TimingPoints\])([\s\S]*?)(?=\[Colours\]|\[HitObjects\])/);
            analyseTimingPoints();
            Colours = data.match(/(?<=\[Colours\])([\s\S]*?)(?=\[HitObjects\])/);
            analyseColours();
            HitObjects = data.match(/(?<=\[HitObjects\])([\s\S]*)/);
            analyseHitObjects();
        }
        function analyseGeneral() {
            if (General) {
                General = General[0].trim();
                let temp = {};
                General.split('\n').forEach((val, index) => {
                    temp[val.split(':')[0].trim()] = val.split(':')[1].trim();
                })
                General = temp;
                bgm = new Audio(`/songs/${songName}/${General.AudioFilename}`);
            }
            if (General.Mode != 3) {
                alertAndHistoryBack('매니아 모드 맵이 아닙니다.');
            }
            //console.log(General);
        }
        function analyseEditor() {
            if (Editor) {
                Editor = Editor[0].trim();
                let temp = {};
                Editor.split('\n').forEach((val, index) => {
                    temp[val.split(':')[0].trim()] = val.split(':')[1].trim();
                })
                Editor = temp;
            }
        }
        function analyseMetadata() {
            if (Metadata) {
                Metadata = Metadata[0].trim();
                let temp = {};
                Metadata.split('\n').forEach((val, index) => {
                    temp[val.split(':')[0].trim()] = val.split(':')[1].trim();
                })
                Metadata = temp;
            }
        }
        function analyseDifficulty() {
            if (Difficulty) {
                Difficulty = Difficulty[0].trim();
                let temp = {};
                Difficulty.split('\n').forEach((val, index) => {
                    temp[val.split(':')[0].trim()] = val.split(':')[1].trim();
                })
                Difficulty = temp;
                //CircleSize:4는 4key를 의미한다.
                if (Difficulty.CircleSize != 4) {
                    alertAndHistoryBack('4key가 아닙니다. 현재 4key만 지원합니다');
                }
            }
            else {
                alertAndHistoryBack('difficulty가 없습니다');
            }
        }
        function analyseEvents() {
            if (Events) {
                Events = Events[0].trim();
                let temp = {};
                Events.match(/\/\/[^\/]+/g).forEach((val, index) => {
                    if (val.split('\r\n')[2])
                        temp[val.split('\r\n')[0].replaceAll('/', '')] = [val.split('\r\n')[1], val.split('\r\n')[2]];
                    else
                        temp[val.split('\r\n')[0].replaceAll('/', '')] = val.split('\r\n')[1];
                })
                Events = temp;
                setBackGround();
            }
        }
        function analyseTimingPoints() {
            if (TimingPoints) {
                TimingPoints = TimingPoints[0].trim();
            }
            //console.log(TimingPoints);
        }
        function analyseColours() {
            if (Colours) {
                Colours = Colours[0].trim();
            }
        }
        function analyseHitObjects() {
            if (HitObjects) {
                HitObjects = HitObjects[0].trim();
                //4key일 경우 64 192 320 448
                let temp = {};
                HitObjects.split('\n').forEach((val, index) => {
                    if (!temp[val.split(',')[0]])
                        temp[val.split(',')[0]] = [];
                    if (/[0-9]+:[0-9]+:[0-9]+:[0-9]+:[0-9]+:/.test(val.split(',')[5])) {
                        //console.log('hold');
                        temp[val.split(',')[0]].push([val.split(',')[2], val.split(',')[5].match(/[^:]+/)[0]]);
                    }
                    else {
                        //console.log('normal');
                        temp[val.split(',')[0]].push([val.split(',')[2], 0]);
                        //console.log(val.split(',')[5].match(/[^:]+/)[0]);
                    }
                })
                console.log(temp);
            }
            else {
                alertAndHistoryBack('hitObject가 없습니다.');
            }
        }
        function setBackGround() {
            //Background and Video events가 배열이라면 [0]은 배경, [1]은 영상이고, 배열이 아니라면 배경이다.
            if (typeof (Events['Background and Video events']) == "string") {
                $('#mainDiv').append(`<img src="/songs/${songName}/${Events['Background and Video events'].match(/(?<=")[^"]+/)[0]}" style="width: 100%;position: absolute;object-fit: cover;z-index:-1">`)
            }
            else {
                $('#mainDiv').append(`<img src="/songs/${songName}/${Events['Background and Video events'][0].match(/(?<=")[^"]+/)[0]}" style="width: 100%;position: absolute;object-fit: cover;z-index:-1">`)
            }
        }

        function initialize() {
            height = can.clientHeight;
            ctx.fillRect(0, 0, 400, height);
            ctx.fillStyle = "white";
            ctx.font = "60px Comic Arial";
            ctx.fillText("press space", 10, 100);
        }
        function oneFrame() {
            logic();
            draw();
        }
        function logic() {
            currentTime = new Date().getTime();
        }
        function draw() {
            height = can.clientHeight;
            drawBackGround();
        }
        function drawBackGround() {
            const keyHeight = 150;
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, 400, height);
            ctx.fillStyle = "#FF0000";
            ctx.fillRect(0, 50, 100, 100);
            ctx.fillRect(100, 90, 100, 100);
            ctx.fillRect(0, height-keyHeight, 100, keyHeight);
        }
    </script>
</head>

<body>
    <div id="mainDiv" class="position-relative overflow-hidden" style="height:100vh">
        <div class="position-absolute" style="top:0px;left:200px;height:100%;">
        </div>
    </div>
    <canvas class="border" id="can" style="width:400px;height:100%;" tabindex='1'></canvas>
    <!--div class="image-container">
        <img src="https://image-cdn.hypb.st/https%3A%2F%2Fkr.hypebeast.com%2Ffiles%2F2023%2F06%2Fchristopher-nolan-agrees-oppenheimer-is-a-horror-movie-ft.jpeg?fit=max&cbr=1&q=90&w=750&h=500" alt="Your Image">
      </div-->

</body>

</html>