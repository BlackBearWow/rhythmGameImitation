<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
    <title>rhythm game songList</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        li {
            transition: all 0.5s;
        }

        li.selected {
            background-color: #800000;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        let songs;
        let allSongs;
        let songIndex = 0;
        let bitmap;
        let bitmapIndex = 0;
        let songBitmapSize = 4;
        function playRhythmGame() {
            let songId = $(`#songIndex${songIndex}`).attr('data-songId');
            let bitmapId = $(`#bitmapIndex${bitmapIndex}`).attr('data-bitmapId');
            location.href = `/playRhythmGame/${songId}/${bitmapId}`;
            //console.log(songId, bitmapId);
        }
        function getAllSongs() {
            $.ajax({
                url: `getAllSongs`,
                type: `get`,
                success: function (data) {
                    // indexedDB에 저장함.
                    console.log(data);
                    saveToDB(data);
                },
                error: function (error) {
                    console.error(error);
                }
            })
        }
        function saveToDB(data) {
            const request = indexedDB.open("rhythm");
            let db;
            request.onerror = (event) => {
                console.error(`Database error: ${event.target.errorCode}`);
            }
            request.onupgradeneeded = (event) => {
                db = event.target.result;
                const songObjectStore = db.createObjectStore("songs", { keyPath: "id" });
                songObjectStore.createIndex("songName", "songName", { unique: true });
                const bitmapObjectStore = db.createObjectStore("bitmap", { keyPath: "id" });
                bitmapObjectStore.createIndex("bitmapName", "bitmapName", { unique: true });
                const noteInfoObjectStore = db.createObjectStore("noteInfo", { keyPath: "path" });
            }
            request.onsuccess = (event) => {
                db = event.target.result;
                const transaction = db.transaction(["songs", "bitmap"], "readwrite");
                const songObjectStore = transaction.objectStore("songs");
                songObjectStore.clear();
                data.songs.forEach((song) => {
                    const request = songObjectStore.add(song);
                    request.onerror = (event) => {
                        console.log(`song 데이터 넣기 에러`);
                    }
                })
                const bitmapObjectStore = transaction.objectStore("bitmap");
                bitmapObjectStore.clear();
                data.bitmap.forEach((val) => {
                    const request = bitmapObjectStore.add(val);
                    request.onerror = (event) => {
                        console.log(`bitmap 데이터 넣기 에러`);
                    }
                })
                alert("전체 곡 가져오기 / 최신화를 하였습니다");
                showAllLists();
            };
        }
        function showAllLists() {
            const request = indexedDB.open("rhythm");
            let db;
            request.onerror = (event) => {
                console.error(`Database error: ${event.target.errorCode}`);
            }
            request.onupgradeneeded = (event) => {
                db = event.target.result;
                const songObjectStore = db.createObjectStore("songs", { keyPath: "id" });
                songObjectStore.createIndex("songName", "songName", { unique: true });
                const bitmapObjectStore = db.createObjectStore("bitmap", { keyPath: "id" });
                bitmapObjectStore.createIndex("bitmapName", "bitmapName", { unique: true });
                const noteInfoObjectStore = db.createObjectStore("noteInfo", { keyPath: "path" });
            }
            request.onsuccess = (event) => {
                db = event.target.result;
                const transaction = db.transaction(["songs", "bitmap"], "readonly");
                const songObjectStore = transaction.objectStore("songs");
                const bitmapObjectStore = transaction.objectStore("bitmap");
                songs = songObjectStore.getAll();
                songs.onsuccess = (event) => {
                    if (event.target.result.length == 0) {
                        alert("songs 데이터가 없습니다. 곡 갱신하기 버튼을 눌러주세요");
                        return;
                    }
                    allSongs = event.target.result;
                    songs = allSongs;
                    listSongList();
                }
                bitmap = bitmapObjectStore.getAll();
                bitmap.onsuccess = (event) => {
                    bitmap = event.target.result;
                    listBitmapKeySizeAndLevel(0);
                }
            };
        }
        function listSongList() {
            $("#songCount").text(`곡 리스트: ${songs.length}곡`);
            $("#songLists").empty();
            //첫곡은 selected 클래스를 부여함.
            songIndex = 0;
            for (let i = 0; i < 11; i++) {
                if (songs.length <= i)
                    break;
                if (i == 0) {
                    $("#songLists").append(`<li class="list-group-item m-0 p-0 d-flex align-items-center selected" id="songIndex${0}" data-songId="${songs[0].id}">
                        <img style="height:70px" src="/songs/${songs[0].songName}/${songs[0].bg}">
                        <div>
                            ${songs[0].songName.substring(0, songs[0].songName.search('-'))} [${songs[0].duration}s]
                            <div class="fw-bold">${songs[0].songName.substring(songs[0].songName.search('-') + 1)}</div>
                        </div>
                    </li>`)
                }
                else {
                    $("#songLists").append(`<li class="list-group-item m-0 p-0 d-flex align-items-center" id="songIndex${i}" data-songId="${songs[i].id}">
                        <img style="height:70px" src="/songs/${songs[i].songName}/${songs[i].bg}">
                        <div>
                            ${songs[i].songName.substring(0, songs[i].songName.search('-'))} [${songs[i].duration}s]
                            <div class="fw-bold">${songs[i].songName.substring(songs[i].songName.search('-') + 1)}</div>
                        </div>
                    </li>`)
                }
            }
            songInfoChange(0);
        }
        function songInfoChange(songIndex) {
            //곡 상세 정보 변경
            if (songs.length == 0) {
                $("#bigImg").attr('src', `https://img1.daumcdn.net/thumb/S56x56/?scode=mtistory2&fname=https%3A%2F%2Ftistory1.daumcdn.net%2Ftistory%2F4106079%2Fattach%2Fab2b0b1cc931435caf3e524b9f5ec7e0`);
                $("#osuNum").text(`곡 검색 결과가 없습니다.`);
                $("#madeBy").text(`곡 검색 결과가 없습니다.`);
                $("#infoSongName").text(`곡 검색 결과가 없습니다.`);
                $("#songDuration").text(`곡 검색 결과가 없습니다.`);
                $("#songTag").text(`곡 검색 결과가 없습니다.`);
            }
            else {
                $("#bigImg").attr('src', `/songs/${songs[songIndex].songName}/${songs[songIndex].bg}`);
                $("#osuNum").text(`osu숫자: ${songs[songIndex].songName.match(/[0-9]+/)[0]}`);
                $("#madeBy").text(`작곡가 or 만든이: ${songs[songIndex].songName.match(/[^0-9-]+/)[0]}`);
                $("#infoSongName").text(`제목: ${songs[songIndex].songName.match(/(?<=-)[\s\S]+/)[0]}`);
                $("#songDuration").text(`곡 길이: ${parseInt(songs[songIndex].duration / 60)}분${songs[songIndex].duration % 60}초 (${songs[songIndex].duration}초)`);
                $("#songTag").text(`태그:${songs[songIndex].tags}`);
            }
        }
        function listBitmapKeySizeAndLevel(songIndex) {
            // 비트맵들을 키 사이즈와 난이도를 화면에 리스트로 넣는다.
            bitmapIndex = 0;
            $("#bitmapLists").empty();
            //song이 없다면 리턴
            if(songs.length == 0)
                return;

            let filteredBitmap = bitmap.filter((b) => {
                //수정요망.
                return b.songId == $(`#songIndex${songIndex}`).attr('data-songId');
            })
            filteredBitmap.sort((a, b) => {
                return (a.keySize - b.keySize) || (a.level - b.level);
            })
            songBitmapSize = filteredBitmap.length;
            filteredBitmap.forEach((b, idx) => {
                if (idx == 0)
                    $("#bitmapLists").append(`<li class="list-group-item flex-fill selected" id="bitmapIndex${idx}" data-bitmapId="${b.id}">${b.keySize}키 ${b.level}</li>`);
                else
                    $("#bitmapLists").append(`<li class="list-group-item flex-fill" id="bitmapIndex${idx}" data-bitmapId="${b.id}">${b.keySize}키 ${b.level}</li>`);
            })
        }
        function changeNoteSpeed(val) {
            $("#noteSpeedNum").html(val);
            localStorage.setItem("noteSpeed", val);
        }
        function changeCanvasOpacity(val) {
            $("#canvasOpacityNum").html(val);
            localStorage.setItem("canvasOpacity", val);
        }
        function filterSongsBySongName(val) {
            //allSongs에서 songs로 검색어를 이용해 곡들을 필터한다.
            if (val == "") {
                songs = allSongs;
            }
            else {
                songs = allSongs.filter((s) => {
                    return s.songName.toLowerCase().includes(val.toLowerCase());
                })
            }
            listSongList();
            listBitmapKeySizeAndLevel(0);
        }
        //document가 로드되면.
        $(function () {
            //indexedDB에서 곡들을 보여줌
            showAllLists();

            //설정창에 필요한것들
            let noteSpeed = localStorage.getItem("noteSpeed");
            let canvasOpacity = localStorage.getItem("canvasOpacity");
            // localStorage에 값이 없다면 새로 저장한다. 
            if (noteSpeed == null) {
                localStorage.setItem("noteSpeed", "1");
            }
            // 값이 있다면 해당 값을 화면에 출력
            else {
                $("#noteSpeedNum").html(noteSpeed);
                $("#noteSpeed").val(noteSpeed);
            }
            //투명도설정 초기값
            if (canvasOpacity == null) {
                localStorage.setItem("canvasOpacity", "1");
            }
            else {
                $("#canvasOpacityNum").html(canvasOpacity);
                $("#canvasOpacity").val(canvasOpacity);
            }
            //곡 검색창 이벤트 리스너 등록.
            $("#songSearch").on('keyup', function (event) {
                //엔터치면 포커스가 풀림.
                if (event.key == "Enter") {
                    $("#songSearch").blur();
                }
                else 
                    filterSongsBySongName(event.target.value);
            });
            //키보드 이벤트 리스너 등록.
            $(document).on('keydown', function (event) {
                //곡 검색 창이라면 아무일도 일어나지 않음.
                if (event.target.id == "songSearch") {
                    return;
                }
                //곡 선택 위 아래
                if (event.key == "ArrowDown") {
                    let max = songs.length - 1;
                    //최대값이면 변화 없음
                    if (songIndex == max)
                        return;
                    //비트맵 선택 인덱스 변경
                    bitmapIndex = 0;
                    //클래스 바꾸기.
                    $(`#songIndex${songIndex}`).removeClass("selected");
                    songIndex += 1;
                    $(`#songIndex${songIndex}`).addClass("selected");
                    // 6이상 (max-5)이하면 리스트 추가 제거
                    if (6 <= songIndex && songIndex <= (max - 5)) {
                        let nextIdx = songIndex + 5;
                        $(`#songIndex${songIndex - 6}`).remove();
                        $("#songLists").append(`<li class="list-group-item m-0 p-0 d-flex align-items-center" id="songIndex${nextIdx}" data-songId="${songs[nextIdx].id}">
                            <img style="height:70px" src="/songs/${songs[nextIdx].songName}/${songs[nextIdx].bg}">
                            <div>
                                ${songs[nextIdx].songName.substring(0, songs[nextIdx].songName.search('-'))} [${songs[nextIdx].duration}s]
                                <div class="fw-bold">${songs[nextIdx].songName.substring(songs[nextIdx].songName.search('-') + 1)}</div>
                            </div>
                        </li>`)
                    }
                    songInfoChange(songIndex);
                    listBitmapKeySizeAndLevel(songIndex);
                }
                else if (event.key == "ArrowUp") {
                    let max = songs.length - 1;
                    //최소값이면 변화 없음
                    if (songIndex == 0)
                        return;
                    //비트맵 선택 인덱스 변경
                    bitmapIndex = 0;
                    //클래스 바꾸기.
                    $(`#songIndex${songIndex}`).removeClass("selected");
                    songIndex -= 1;
                    $(`#songIndex${songIndex}`).addClass("selected");
                    // 5이상 (max-6)이하면 리스트 추가 제거
                    if (5 <= songIndex && songIndex <= (max - 6)) {
                        let nextIdx = songIndex - 5;
                        $(`#songIndex${songIndex + 6}`).remove();
                        $("#songLists").prepend(`<li class="list-group-item m-0 p-0 d-flex align-items-center" id="songIndex${nextIdx}" data-songId="${songs[nextIdx].id}">
                            <img style="height:70px" src="/songs/${songs[nextIdx].songName}/${songs[nextIdx].bg}">
                            <div>
                                ${songs[nextIdx].songName.substring(0, songs[nextIdx].songName.search('-'))} [${songs[nextIdx].duration}s]
                                <div class="fw-bold">${songs[nextIdx].songName.substring(songs[nextIdx].songName.search('-') + 1)}</div>
                            </div>
                        </li>`)
                    }
                    songInfoChange(songIndex);
                    listBitmapKeySizeAndLevel(songIndex);
                }
                //비트맵 선택 좌 우
                else if (event.key == "ArrowLeft") {
                    //처음 비트맵이 선택되어있다면 아무것도 하지 않음.
                    if (bitmapIndex == 0)
                        return;
                    //클래스 바꾸기
                    $(`#bitmapIndex${bitmapIndex}`).removeClass("selected");
                    bitmapIndex -= 1;
                    $(`#bitmapIndex${bitmapIndex}`).addClass("selected");
                }
                else if (event.key == "ArrowRight") {
                    //마지막 비트맵이 선택되어있다면 아무것도 하지 않음.
                    if (bitmapIndex == (songBitmapSize - 1))
                        return;
                    //클래스 바꾸기
                    $(`#bitmapIndex${bitmapIndex}`).removeClass("selected");
                    bitmapIndex += 1;
                    $(`#bitmapIndex${bitmapIndex}`).addClass("selected");
                }
                //엔터
                else if (event.key == "Enter") {
                    playRhythmGame();
                }
            });
        });
    </script>
</head>

<body>
    <div class="container-fluid">

        <div class="row text-bg-secondary p-1 mb-1">
            <div class="col-4">
                <img src="https://osu.ppy.sh/images/favicon/android-chrome-192x192.png" alt="Logo" width="32">
                <span class="align-middle">osu mania 리듬게임</span>
            </div>
            <div class="col-4">
                <input id="songSearch" class="form-control" type="text" placeholder="곡이름 검색하기">
            </div>
            <div class="col-4 d-flex justify-content-end">
                <button type="button" class="btn btn-primary me-2">도움말</button>
                <button type="button" class="btn btn-primary me-2">로그인</button>
                <button type="button" class="btn btn-primary me-2" data-bs-toggle="offcanvas"
                    data-bs-target="#offcanvasExample" aria-controls="offcanvasExample">설정</button>
                <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasExample"
                    aria-labelledby="offcanvasExampleLabel">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="offcanvasExampleLabel">설정</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <!--위에서 내려오는 속도-->
                        <label for="noteSpeed" class="form-label">노트가 위에서 내려오는 속도: </label>
                        <a id="noteSpeedNum">1</a>
                        <input type="range" class="form-range" min="0.3" max="3" step="0.1" id="noteSpeed"
                            oninput="changeNoteSpeed(this.value)">
                        <!--canvas 투명도-->
                        <label for="canvasOpacity" class="form-label">canvas 투명도(1에 가까울수록 선명함): </label>
                        <a id="canvasOpacityNum">1</a>
                        <input type="range" class="form-range" min="0.2" max="1" step="0.05" id="canvasOpacity"
                            oninput="changeCanvasOpacity(this.value)">
                        <button type="button" class="btn btn-primary" onclick="">라이트모드 / 다크모드</button>
                    </div>
                </div>
                <button type="button" class="btn btn-primary" onclick="getAllSongs()">전체 곡 가져오기 / 최신화</button>
            </div>
        </div>

        <div class="row">
            <div class="col-6">
                <div id="songs" class="card">
                    <div class="card-header">
                        <h1 id="songCount">곡 리스트: 0곡</h1>
                    </div>
                    <ul class="list-group list-group-flush" id="songLists">
                        <li class="list-group-item m-0 p-0">
                            <img style="height:70px" src="/songs/120289 Dj Mashiro - Prismatic Lollipops/37945384.png">
                            노래제목
                        </li>
                    </ul>

                </div>
            </div>
            <div class="col-6" id="songInfo">
                <div class="card">
                    <div class="card-header">
                        <h1>곡정보 & 난이도 선택</h1>
                    </div>
                    <img style="width:100%; height:550px; object-fit: cover;" class="card-img-top"
                        src="/songs/120289 Dj Mashiro - Prismatic Lollipops/37945384.png" id="bigImg">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item" id="osuNum">osu숫자:</li>
                        <li class="list-group-item" id="madeBy">만든이:</li>
                        <li class="list-group-item" id="infoSongName">제목:</li>
                        <li class="list-group-item" id="songDuration">곡 길이:</li>
                        <li class="list-group-item" id="songTag">태그:</li>
                    </ul>
                    <ul class="list-group list-group-horizontal" id="bitmapLists">
                        <li class="list-group-item flex-fill" data-bitmapId="1">4키 1.12난이도</li>
                        <li class="list-group-item flex-fill" data-bitmapId="2">2.12</li>
                        <li class="list-group-item flex-fill" data-bitmapId="3">3.12</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</body>

</html>